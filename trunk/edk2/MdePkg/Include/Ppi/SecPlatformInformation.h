/** @file
  This file declares Sec Platform Information PPI.

  This service is the primary handoff state into the PEI Foundation. 
  The Security (SEC) component creates the early, transitory memory 
  environment and also encapsulates knowledge of at least the 
  location of the Boot Firmware Volume (BFV).

  Copyright (c) 2006 - 2008, Intel Corporation                                                         
  All rights reserved. This program and the accompanying materials                          
  are licensed and made available under the terms and conditions of the BSD License         
  which accompanies this distribution.  The full text of the license may be found at        
  http://opensource.org/licenses/bsd-license.php                                            

  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,                     
  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.             

  @par Revision Reference:
  This PPI is defined in PI.
  Version 1.00.

**/

#ifndef __SEC_PLATFORM_INFORMATION_PPI_H__
#define __SEC_PLATFORM_INFORMATION_PPI_H__

#define EFI_SEC_PLATFORM_INFORMATION_GUID \
  { \
    0x6f8c2b35, 0xfef4, 0x448d, {0x82, 0x56, 0xe1, 0x1b, 0x19, 0xd6, 0x10, 0x77 } \
  }

typedef struct _EFI_SEC_PLATFORM_INFORMATION_PPI EFI_SEC_PLATFORM_INFORMATION_PPI;


//
// EFI_HEALTH_FLAGS
// Contains information generated by microcode, hardware, and/or the Itanium
// processor PAL code about the state of the processor upon reset.
//
typedef union {
  struct {
    UINT32   Status                   : 2;
    UINT32   Tested                   : 1;
    UINT32   Reserved1                :13;
    UINT32   VirtualMemoryUnavailable : 1;
    UINT32   Ia32ExecutionUnavailable : 1;
    UINT32   FloatingPointUnavailable : 1;
    UINT32   MiscFeaturesUnavailable  : 1;
    UINT32   Reserved2                :12;
  } Bits;
  UINT32     Uint32;
} EFI_HEALTH_FLAGS;

#define NORMAL_BOOT_CALL    0x0
#define RECOVERY_CHECK_CALL 0x3

typedef struct {
  UINT8 BootPhase;
  UINT8 FWStatus;
  UINT16 Reserved1;
  UINT32 Reserved2;

  UINT16 ProcId;
  UINT16 Reserved3;
  UINT8  IdMask;
  UINT8  EidMask;
  UINT16 Reserved4;

  UINT64 PalCallAddress;
  UINT64 PalSpecialAddress;
  UINT64 SelfTestStatus;
  UINT64 SelfTestControl;
  UINT64 MemoryBufferRequired;

} IPF_HANDOFF_STATUS;


typedef struct {
  EFI_HEALTH_FLAGS HealthFlags;
} EFI_SEC_PLATFORM_INFORMATION_RECORD;



/**
  This interface conveys state information out of the Security (SEC) phase into PEI.

  @param  PeiServices               Pointer to the PEI Services Table.
  @param  StructureSize             Pointer to the variable describing size of the input buffer.
  @param  PlatformInformationRecord Pointer to the EFI_SEC_PLATFORM_INFORMATION_RECORD.

  @retval EFI_SUCCESS           The data was successfully returned.
  @retval EFI_BUFFER_TOO_SMALL  The buffer was too small.

**/
typedef
EFI_STATUS
(EFIAPI *EFI_SEC_PLATFORM_INFORMATION)(
  IN CONST  EFI_PEI_SERVICES                    **PeiServices,
  IN OUT    UINT64                              *StructureSize,
  OUT       EFI_SEC_PLATFORM_INFORMATION_RECORD *PlatformInformationRecord
);


/**
  @par Ppi Description:
  This service abstracts platform-specific information. It is necessary 
  to convey this information to the PEI Foundation so that it can 
  discover where to begin dispatching PEIMs.

  @param PlatformInformation 
  Conveys state information out of the SEC phase into PEI.

**/
struct _EFI_SEC_PLATFORM_INFORMATION_PPI {
  EFI_SEC_PLATFORM_INFORMATION  PlatformInformation;
};


extern EFI_GUID gEfiSecPlatformInformationPpiGuid;

#endif
